name: Create resources using Terraform

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform-checks:
    runs-on: ubuntu-latest

    steps:
      # Checkout Repository
      - name: Check out Git Repository
        uses: actions/checkout@v3

      # Cache TFLint plugins directory
      - name: Cache plugin dir
        uses: actions/cache@v2
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      # Setup TFLint
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v2
        with:
          github_token: ${{ secrets.CI_GITHUB_TOKEN }}

      # Print TFLint version
      - name: Show TFLint version
        run: tflint --version

      # Install TFLint plugins
      - name: Init TFLint
        run: tflint --init

      # Run TFLint
      - name: Run TFLint
        id: tflint
        run: |
          tflint -f compact --recursive --force 2>&1 | tee tflint-out.txt
          if [ ! -s tflint-out.txt ]; then
            echo "TFLint run has no findings" >> tflint-out.txt
          else
            sed -i '1i*************' tflint-out.txt
            sed -i '1iTFLint Report' tflint-out.txt
          fi

      # TFLint Output in PR
      - name: TFLint Output in PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          header: tflint-outputs
          recreate: true
          path: tflint-out.txt

      # Run Tfsec
      - name: Run Tfsec
        id: tfsec
        run: |
          tfsec . 2>&1 | tee tfsec-out.txt
          if grep -q "ERROR" tfsec-out.txt; then
            echo "::set-output name=issue_detected::true"
          fi

      # Tfsec Output in PR
      - name: Tfsec Output in PR
        if: steps.tfsec.outputs.issue_detected == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          header: tfsec-outputs
          recreate: true
          path: tfsec-out.txt

      # Format Terraform files
      - name: Format Terraform files
        run: terraform fmt -recursive

      # Test with Checkov
      - name: Test with Checkov
        id: checkov
        run: |
          checkov -d . 2>&1 | tee checkov-out.txt
          if grep -q "ERROR" checkov-out.txt; then
            echo "::set-output name=issue_detected::true"
          fi

      # Checkov Output in PR
      - name: Checkov Output in PR
        if: steps.checkov.outputs.issue_detected == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          header: checkov-outputs
          recreate: true
          path: checkov-out.txt
